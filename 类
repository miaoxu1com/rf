class  myclass:
  def savafile(self,a):
    self.a = a
    self.b = 'b'
  def findfile(self):
    print(self.a,self.b)
  def deletefile(self,c)
    print(c)
    print(self.c)#打印出错因为注入到类中的实参是没有在init中初始化所以c不是类的属性,只是一个方法的局部变量
testA = myclass('a')
#这里实例testA的属性不是类的属性，所以一下属性只有testA有
testA.name = 'wusu'
testA.sex = 'man'
print(testA.name,testA.sex)

testB = myclass('b')
print(testB.name,testB.sex)#打印报错name,sex属于实例testA的，类没有这些属性所以报错
testB.findfile() #报错因为self.a,self.b是在savafile方法中定义的,没有先调用savafile方法self.a，self.b就不会被加载到内存中
所以要想testB.findfile() ，就要先执行testB.savafile()
savefile相当于了init方法的作用只是init是在初始化实例的时候就被自动执行了，属性已经被提前加载到内存中了所以后面所有的方法才可以调用在init中定义的属性，也就是属性被全局化了

所以类可以没有init  但是要用类的属性时一定要使用init 方便了很多，初始化都可以在init中添加
定义类方法中每个方法中都要有一个self这个就是在每个方法中都注入了一个类的实例，而且有没有init都有self,在实例化类的时候就会有一个self被加载到内存中并指向这个类,打印self可以看到显示的
是实例的十六进制地址，实例化几次就会打印几次地址

类在定义的时候是()里不是写的参数，定义时注入代表的是继承类,实例化是调用是参数的注入
读和写都是对文件来说的,wb写二进制文件首先是会在内存中开辟二进制缓存空间然后把读取到的数据流写到这个缓存空间中最后写入到磁盘

自己模拟类的继承来探索继承关系A有init函数B继承A，B没有init函数在实例化B时会自动执行A的init
class A:
  def __init__(self):
  print('A')
class B(A):
  def man(self):
    print('man')
自己模拟类的继承来探索继承关系A有init函数B继承A，B有init函数在实例化B时会执行B的init,这时要想调用A的init就要在B的init中手动初始化A的init方法
class A:
  def __init__(self):
  print('A')
class B(A):
  def __init__(self):
    print('B')
 所有我们在写多线程时要在子类的init中手动执行 threading.Thread.__init__


    python生成组件的win32 COM接口文件调用对应的接口与程序进行交互
1.安装pywin32
   安装pywin32 包含了win32api 和win32com 等几个非常强大的模块，安装完成后，会在python目录下的Lib/site-packages/下生成win32 win32com 和win32comext三个文件夹
里边都有demons
2.生成com组件对应的.py文件
双击/win32com/client/目录中的make.py会弹出机器中所有的com组件
双击我们需要的类型库，会在/win32com/gent_py/目录下生成该组件的py文件 找不到使用everything搜索
3.研究生成的py接口文件
打开py文件会显示一些基本信息，以及接口函数，一些重要的参数（CLSID）

可以通过for 循环实例化  放在一个数组中 然后这个这个数组接口就相当于  [{},{}]这样的结构了
函数能解决为什么要写个类呢 根据使用场景决定你的编码方法

enumerate 相当于 range（0,len(arr)） 但是enumerate不用管数组的索引开始，非常适合可遍历对象转索引用  最终转成索引和值

python回调函数模拟
def a():
  c(b)
def b():
  print('b')
def c(call_func):
  call_func()
回调函数在三个函数之间完成
也可以在类中实现回调
class A：
  def man(self):
    btest = B()
    btest.newman(btest.newman(self.newman))
  def newman(self):
    print("newman")  
class B:
def newman(self,call_func):
  call_func()
回调就是在A中调用B的方法然后把C传给B
构造类的实例实际就是对类的内部进行初始化，初始化之后就可以调用了
random.shuffle()随机排序列表
多线程下发下去任务不会等上一个线程结束在执行下一个，任务下发下去是同时执行的

定时任务的脚本使用python程序直接执行py脚本报找不到指定的文件  所以最后封装成bat脚本解决了该问题  定时任务需要bat脚本

打码  接码平台

https://cloud.tencent.com/developer/article/1621113  python  订票

遇到一直提示编码问题 后来看ide原来文件保存时选择的是gbk编码  然后ide显示文件是gbk编码  实际要用utf编码  所以把文件用记事本另存为utf8编码即可

https://www.jianshu.com/p/400c612381dd
指定脚本的执行解释器

python静态方法 不用实例化  拿类名就可以直接调用方法
@staticmethod

python日期对象化  就可以调用对象的方法了  对象之后不能直接拼接 要调用对应的string把对象转成字符串才能拼接

正则表达式对象化 方便复用

auto js定时任务
https://blog.csdn.net/feiyunjs/article/details/95591249

python 遍历字典
https://blog.csdn.net/CuGBabyBeaR/article/details/25037687

获取类的方法但是获取的结果是一个字符串  不能使用  类名.方法或类名.属性调用成员

为什么要写本地端口呢  因为要和本地的进程之间进行通信 所以写了一个本地端口

只要是要import的 都是python的库  比如 robotframework  虽然是一个框架但是也是 python的库 hyrobot也是  所以要把hyrobot放到sit-packages中 否则会报找不到hyrobot

如果我们的数据有字典嵌套
那么二级字典可以设置为一个变量把二级字典当做一个 原子字典对变量进行赋值  而且我们想要修改值时还不用 从一级字典进行取key直接对原子字典进行修改就可以了 很方便

test={
    b:["c","d","e"]
}
{
  "a":test
}

嵌套太多反而看起来不容易理解这种看起来代码更简洁 更容易理解
而且代码折叠时也很清晰，代码块不会太大

配置可以放在json中，如果多组数据可以使用
{
  "a":{
    [
      "b"
    ]
  },
    "c":{
    [
      "d"
    ]
  }
}

当是多组数据时就可以用多线程进行不同的数据进行处理了，加快了数据的处理速度，同时处理多个同一个操作

不需要遍历的字典可以使用不同的key，调用时直接用keyname就可以 
不需要修改的字典可以直接进行字典的嵌套而不用再使用变量去定义二级字典

所有的值必须放在同一个文件 放在另外一个文件时会发现后面定义数据会重复使用另外一个文件中的数据  就要在当前文件再次导入定义的文件，导致多次引入同一个文件冗余
如：一下就是不集中分散在多个文件中引入时多个文件都引入了导致重复引入，要么重复赋值要么重复引入，放在同一个文件可以解决这个
publicfunction.py
def init_data()
    id=[{
      "name":"zhangsan"
      "id":1
    },{
      "name":"lisi"
      "id":2
    }
    ]
    appid={
      "a":"app1",
      "b":"aap2"
    }
def run_case1():
  pass
    
variabledata.py
from publicfunction import *
  api_data={
  "app_id":appid["a"]
  }
  
  
run.py
from publicfunction import *
  run_case1
  

需要动态创建的数据 就不要放在variabledata.py中就定义成一个函数 执行时 按需调用函数去初始化
用例参数中都会放的数据提到publicfunction中定义成函数进行初始化

pycharm断点调试选择调试的模块可以看到 调试信息里边 special variables里边会存放一些变量包括函数 在内存中初始化也是被看做变量 如果是函数变量 就会有一个{function}的表示  字符串就是 {str}表示
不同类型在调试中显示的标识不一样 可以一目了然的看出来这个变量是函数还是 基础类型的数据结构fe

分组替换就相当于在编辑器中的查两次替换两次的操作

py文件都要是utf-8文件-可以在pycharm fileencode中设置文件的编码
bat要是gbk编码才行否则报错


可以通过deepcopy  来实现数据结构 重复创建对象  这样就不用每次写一遍  复杂的数据结构  就可以实现 不同数据的动态赋值且不影响原有的值

当你的包含在别人的list中时  要共用简便的做法是从它的结构体重  切片组装成自己要的数据



由于装饰器是在函数内定义函数 且函数内的函数 无法在外部直接调用 所以只能一层层返回函数名  最终就相当于在最内部的函数中执行了  被装饰的函数 装饰器实际就省去了  
wrap（func）return log
func = wrap
func注入和 func赋值给原函数的步骤

__slots__ liaoxuefeng
backoff 优雅轮询


可以把函数放在return 中相当于执行加返回

列表推导式 匿名函数  就相当于把  函数体循环体 前置了

代码规范

为什么有些用编码  有些用加密  因为是编码是为了便于 存储到内存中 和 用到数据传输和交换中  有些语言不编码传输不了 编码是可逆的

但是加密是为了安全是不可逆的  而且加密会生成一些序列 不易于开发人员编程  如果编程中把字符转码传输到另一端可以  反编码 解析出原始的内容  但是一旦用加密来当做编码那 另外一端就解析不出原始的内容了
只能看到加密之后的字符串   这是开发员不愿意见到的 
但是加密就是为了生成一段不可逆的序列然后用来和用户输入的内容加密后进行比较一致即认为是系统的用户，所以加密后的内容一定是每次加密结果都一样而不是可变的，可以用来比较的

引入包和模块   相对引入的 当前路径用 .  上一级用 .. 而不用加/加就报错了
from后面一定是跟的路径  import是文件  
一般输入import时自动帮你读取当前目录 如果有就自动提示你 
如果当前目录没有就去环境变量pythonpath中找
如果还是没有就去解释器中设置的路径找 就是解释器内置的函数sys  sys.path里边去找
相对引入容易出错 不推荐使用 还是使用绝对路径

使用htrobot  如果是python定义的变量在hyrobot case中使用就用GSTORE[]的全局变量   如果只是在同一个py文件中定义函数在函数之间调用  可以用global来定义函数内的局部变量然后通过跨函数调用
就不用每次调用都会返回值
像类一样  初始化是一个单独的方法  在公共py文件函数库中  初始化也可以是一个函数  然后里边放所有的初始化  然后在把整个初始化放在hyrobot的测试套初始化中  这样就实现了初始化
按照类的定义方法的思想定义函数   如果公共函数库  需要在hyrobot suite_setup中引入使用  初始化  就使用GSTORE  使用动态的global定义函数内的全局变量也可以但是放在hyrobot的testsetup中就会报错 
global是动态  定义全局变量的 所以在在运行时  定义的变量加载到内存中   使用hyrobot调试时  不会报错  只是在ide编辑器中会报错  解决方案就是用hrobot yGSTORE解决

需要登录的网站才需要创建回话  保持登录状态
不需要登录的直接发送请求

python字典类型 要使用循环遍历必须每个字典都相同的key 不要用值去当key  每个key不一样这种就没法用循环 使用key进行值得 修改

为了集中管理接口  就是用一个数组字典去定义所有的apiurl放在一个 数组字典中 然后给个cn_name  en_name去取值获取对应的api进行拼接  然后使用正则匹配进行替换参数为实际的值

用例用到的值都不要用函数的入参去传然后调用函数 去跑  用例  这样调用时会重复入参  好的解决方法就是  按照api body的入参  去编写字典，所有的用例字典都放在list中然后  调用字典就可以实现用例
这样做就是为了集中管理  用例值

所有需要静态维护的值都去放到字典中然后统一维护 这个字典就可以了


然后就是如果每次入参结构相同  我们只需要初始化这个结构 然后以后每次 根据不用的用例 针对个别值重新赋值即可，  且可以把这些赋值统一放在一个字典中进行维护 进行统一管理

所有的函数都统一用 get前缀命名  query  add update delete 对应具体操作的函数
比如：获取api
get_api_url(en_name="",cn_name=""):
  api_url=[
    {
        "en_name":"",#根据接口具体的功能命名
        "cn_name":"",#接口中文名称
        "api_url":""
    },
    {
      ......
    }
  ]
  
get_spelling_url(host="", url="")
  api_url = host + url
  
get_render_url(url="", **kwargs):
  def repl_func(matched):
    var= matched.group("var")
      return kwargs.get(var,None)
  patten = r"{(?P<var>[\w]+)}" # 起一个相同名字就可以循环拿var访问匹配到的值，实现不同值分组替换
  return re.sub(patten, repl_func, url, re.M)
  



使用 cmd /c "cd .>新建文本文件.txt"  没有自带的新建快  还是系统内置的命令优化好

smartsvf  创建svf校验文件 然后导入文件夹校验 文件是否有损坏很好用 这个就像是我想的 上传网盘后 显示一列校验和  下载之后显示一列校验和对比  来判断是否在下载过程中文件损坏


ssh   就是安全shell的意思  安全的回话
md5  hash都是要有一个内容输入 才会生成序列号  uuid会使用物理设备的信息生成唯一的识别码

动态调试就是打断点跟踪调试  不支持断点就是非动态调试

kite不支持绿色版pycharm  有一个vscode安装版 会自动装kite  可以正常使用kite 且会显示kite在状态 当前的状态

抓包不能双重代理 比如浏览器有了代理插件  再用fiddler去代理系统就抓不到包  就因为用双重代理

调试一个网页  要知道分析连接请求是干什么的  可以直接在 network  双击一个请求 直接在页面打开  看页面中是什么就知道是干什么的了  另外根据域名请求判断  页面是干什么的

还有就是看这个页面 有无刷新  直接看谷歌浏览器 标签页是否有刷新表示闪过  有就是这个网站所有的请求都是 刷新式的 请求返回的结果都是document静态文档  而不是用ajax动态请求这种技术的无刷新渲染模式所以
我们要取数据只能从这个静态页面上去匹配节点然后正则提取我们要的数据 
多线程有两种方法  一种是直接调用函数   一种是直接继承Thread类   然后如果多线程之间还需要同时修改同一个数据对象 就要用锁线程同步

继承了父类 然后再调用父类的初始化  然后就有了父类的属性和方法  然后子类没有定义这些属性  但是直接赋值了直接给  就是调用了父类的属性直接给父类的属性赋值

字典两个key  如果要获取两个key下面的list就要遍历两次

for j in v["name"] 
  print(j)
for v in v["age"] 
  print(k)
  
  如果要设置两个不同时间点的定时任务 就要分两次设置 一个时间点是 早上  一个是晚上

轮询查询一定要指定一个次数 作为轮询终止的条件 如果不指定会死循环 或者指定查询时间也可以

密码加密方案
base64编码
存在环境变量中
存在文件中
存在注册表中
复杂的使用密钥对 认证用户
创建模块编译模块为二进制，密码信息被变成二进制文件
这是一个简单的方法：

创建一个python模块-我们称之为peekaboo.py。
在peekaboo.py中，同时包含密码和需要该密码的任何代码
通过导入此模块（通过python命令行等）创建一个编译版本-peekaboo.pyc。
现在，删除peekaboo.py。
现在，您可以仅依靠peekaboo.pyc来愉快地导入peekaboo。由于peekaboo.pyc是字节编译的，因此临时用户无法读取。
尽管它很容易受到py_to_pyc反编译器的攻击，但它应该比base64解码更加安全。


我执行此操作的方法如下：

在python shell上：

>>> from cryptography.fernet import Fernet
>>> key = Fernet.generate_key()
>>> print(key)
b'B8XBLJDiroM3N2nCBuUlzPL06AmfV4XkPJ5OKsPZbC4='
>>> cipher = Fernet(key)
>>> password = "thepassword".encode('utf-8')
>>> token = cipher.encrypt(password)
>>> print(token)
b'gAAAAABe_TUP82q1zMR9SZw1LpawRLHjgNLdUOmW31RApwASzeo4qWSZ52ZBYpSrb1kUeXNFoX0tyhe7kWuudNs2Iy
然后，使用以下代码创建一个模块：

from cryptography.fernet import Fernet

# you store the key and the token
key = b'B8XBLJDiroM3N2nCBuUlzPL06AmfV4XkPJ5OKsPZbC4='
token = b'gAAAAABe_TUP82q1zMR9SZw1LpawRLHjgNLdUOmW31RApwASzeo4qWSZ52ZBYpSrb1kUeXNFoX0tyhe7kWuudNs2Iy7vUwaY7Q=='

# create a cipher and decrypt when you need your password
cipher = Fernet(key)

mypassword = cipher.decrypt(token).decode('utf-8')
完成此操作后，您可以直接导入mypassword，也可以导入令牌和密码以根据需要进行解密。

显然，这种方法有一些缺点。如果某人同时拥有令牌和密钥（就像他们拥有脚本一样），则他们可以轻松解密。但是，它确实很模糊，如果您编译代码（使用Nuitka之类的代码），
至少您的密码不会在十六进制编辑器中显示为纯文本。

知道主密钥自己。不要硬编码。

使用py-bcrypt（bcrypt），强大的哈希技术来自己生成密码。

基本上可以做到这一点（的想法...）

import bcrypt 
from getpass import getpass 
master_secret_key = getpass('tell me the master secret key you are going to use') 
salt = bcrypt.gensalt() 
combo_password = raw_password + salt + master_secret_key 
hashed_password = bcrypt.hashpw(combo_password, salt) 
保存盐和散列密码的地方。所以每当你需要使用的密码，您正在阅读的加密密码，并测试对原料您再次输入密码。

这基本上是如何登录这些天应该如何工作。

https://www.liujiangblog.com/course/python/64
getpass
阅读: 8021     评论：0
getpass模块大概是标准库中最简单的一个模块了。getpass模块用于输入密码时，隐藏密码字符。

我们都知道，密码是非常重要不能展示给他人观看的事物。做演示的时候，如果你的密码以明文的方式在显示设备上打印出来了，那就太糟糕了。所以不管是在普通软件中还是浏览器上，我们输入的密码通常都以圆点或者星号替代，有的甚至根本就不显示密码输入过程。

那么如何在Python中也实现这一功能呢？使用getpass模块！

然而这是个悲伤的故事......

getpass模块简单到只有两个方法：

getpass.getpass(prompt='Password: ', stream=None)

提示用户输入密码。可自定义提示符。可从stream中读取密码。

getpass.getuser()

获取当前用户名。按顺序从LOGNAME, USER, LNAME或者USERNAME这些环境变量中查询。

1. 在IDLE中使用
>>> import getpass
>>> pwd = getpass.getpass("请输入密码： ")

Warning (from warnings module):
  File "C:\Python36\lib\getpass.py", line 100
    return fallback_getpass(prompt, stream)
GetPassWarning: Can not control echo on the terminal.
Warning: Password input may be echoed.
请输入密码： 123456
>>> pwd
'123456'
>>> getpass.getuser()
'Administrator'
What!?getpass在IDLE中是无效的，官方也给出了警告提示，笑哭！

2. 在Pycharm中使用
import getpass

pwd = getpass.getpass("请输入密码： ")
print("密码输入成功！")
print("你的密码是：%s" % pwd)
image.png-33.6kB

实际运行一遍，你会发现，根本无法使用！

3. 在命令行界面中使用
image.png-55.7kB
python test.py
到命令行界面中测试一下吧，你会发现功能正常，完全可用！

总结：getpass模块只能用于命令行界面！^_^

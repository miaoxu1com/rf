https://www.cnblogs.com/chengchengla1990/p/9895244.html---函数中注入的实参名字无所谓对应的是  脚本入参的位置
变量文件 在一个文件中定义多个环境的配置
https://www.jianshu.com/p/003c14257b83
另外一种就是每一个配置文件对应一个环境  和 一个jenkins任务  和一个运行脚本

使用框架就是被人帮你写好了方法 你调用方法搭积木完成自己的需求就行了

python web模板引擎动态渲染数据发邮箱

redis  集合类型数据  集合和数组一样 是一组数据 所以如果我们的数据是一组的那么就可以用集合数据类型存储，比如ID要存储一组stringID   
Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。
集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员）
redis原生不支持json数据类型需要安装模块扩展
有序的数据就可以使用索引访问数据
redis是不是持久化把服务端进程关闭掉然后重新打开就知道数据是否是持久化的了  下次再次打开访问上次设置的数据如果不存在那就是不是持久化的  而且数据有过期时间
为 Redis 添加 JSON 数据类型
https://cloud.tencent.com/developer/article/1084698

Redis 选择hash还是string 存储数据？
https://juejin.im/post/6844903872834584590

格式校验利器：JSON Schema 简介
https://juejin.im/post/6844903641921355789
Python Web框架哪家强? Django vs Flask深度对比
https://zhuanlan.zhihu.com/p/80899085


MongoDB 是一个基于--分布式--文件存储的数据库。由 C++ 语言编写。旨在为 --WEB-- 应用提供可扩展的高性能数据存储解决方案。
MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。
由于mongodb的文档类型和json数据类型一样所以对web项目支持非常好又是分布式就提升了对大数据的支持--分布式就代表可以搭建集群
mongodb支持 索引  排序  聚合 关系型数据库的特征
非关系数据库原生不支持join关联查询 需要自己在代码中处理

学习新知识已经能解决了当前的问题就可以不用学更多，当学的知识满足不了自己的问题时就要学新的方法计知识 去解决，渐进式学习

python语言json schema validator编写
https://liqiang.io/post/use-json-schema-with-pytho

rf根据代码块结构判断是否是测试case

数据库加载数据的过程  是先从硬盘数据库文件进行认证后读取数据然后加载到内存中 而且随着数据量越来越多数据库文件也越来越大  数据库会在磁盘存在一个数据文件
redis和数据库就不一样了，redis是缓存级别的操作直接把数据放在缓存中，所以没有产生文件在磁盘中，不用维护文件，但是如果是内存级别的 电脑断电数据是否还存在
既然是缓存数据库，默认就是缓存的，不是持久化的要启动就要对配置文件进行配置开启对应的功能

经过第一次设计发现在测试套件中定义过多的表格变量不利于维护，还是使用变量文件更利于后期的维护
参数文件也类似 robotframework 的变量文件  参数过多就用变量文件来用

任何数据库都有支持数据类型  比如json结构就支持6中类型，redis也是

https://lework.github.io/2019/06/30/k8s-ha-bin-install/

python
redisConfig类就是操作redis的一个类

类init就是初始化的初始化之后是全局变量
后面方法要用就现在这里初始化一个空数组如：dataList = []
后面方法可以从接口返回数据 或者 初始化的时候从文档  数据库读取数据 对初始化变量进行赋值
https://blog.csdn.net/junmoxi/article/details/80913060
SpringBoot使用redis做缓存机制


windows下安装和配置Redis
https://www.jianshu.com/p/e16d23e358c0

开源集成安全很重要

postman
pre-requestScript

const  loginrequest = {
url:"http://url"
header:"content-Type:content"
method:"Post",
  body:{
    mode:"raw",
    raw:"jsonstr"--params表单形式
  }
}
pm.sendRequest(loginrequest,function(err,res){
  console.log(res);
  pm.globals.set("varName",resvalue)
})
body 是json对象
const myrequest = {
url:"http://url"
header:"content-Type:content"
method:"Post",
body:{
    mode:"raw",
    raw:JOSN.stringify({
      jsonObj
    })
  }
}
pm.sendRequest(myrequest,function(err,res){
})
在pre-requestScript中的响应为数组，在tests中获取该数组进行处理的方法  有的时候是get 但是在postman可能是post请求这个要试试
var resdata = JSON.parse(responseBody);-通过这种发放获取到pre-script中的响应内容
postman中的循环发送请求
for (var i in listData){
  var myrequest = {
  url:"http://url"
  header:"content-Type:content"
  method:"Post",
  body:{
      mode:"raw",
      raw:JOSN.stringify({
        jsonObj
      })
    }
  }
  --注意这里请求体中当时做实验是不能有内容否则报错
  pm.sendRequest(myrequest,function(err,response){
  })
}
rf日志文件jenkins直接打开的解决方法
https://www.coder.work/article/350168
答案在Jenkins问题跟踪系统中解释：https://issues.jenkins-ci.org/browse/JENKINS-32118
要解决您的问题，您必须：
连接到您的Jenkins URL（http://[IP]:8080/）
从左侧面板单击Manage Jenkins。
单击脚本控制台
将此复制到域中
System.setProperty("hudson.model.DirectoryBrowserSupport.CSP","sandbox allow-scripts; default-src 'none'; img-src 'self' data: ; style-src 'self' 'unsafe-inline' data: ; script-src 'self' 'unsafe-inline' 'unsafe-eval' ;")
单击运行按钮。
执行你的詹金斯建造。

robotframework 合并Xml
https://blog.csdn.net/rungong123/article/details/88385857

python批量插入配置到到nignx文件
Python 批量更新 nginx 配置文件
https://wiki.jikexueyuan.com/project/python-actual-combat/tutorial-27.html
一个修改nginx.conf配置文件的开源工具
http://www.python88.cn/art/45898/
nginxparser, 使用Pyparsing解析 Nginx 配置
https://www.kutu66.com/GitHub/article_97669
PyNginxConfig怎么用
nginxparser怎么用

可以自定义错误信息  should be as strings  条件1  条件2  msg自定义信息   ride中错误信息就是Fail开头后面的  测试报告中就是Message一栏

然后ride打开robot文件就没有文件夹了  用命令行执行时一定要指定.robot文件这样 解析xml文件才能解析到suite的报错信息

robotframework在命名参数之后获得位置参数 报这个错误 使用postman转换成code之后 在notepad++中格式化后赋值给data还是报这个错误  然后直接赋值postman转化带格式的code直接赋值给data解决了这个问题
涉及到job的必须转换之后赋值给data才不会报错
